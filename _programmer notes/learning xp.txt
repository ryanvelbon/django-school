





1. Custom User Model


2. Regular expression for Phone numbers
     - https://stackoverflow.com/questions/19130942/whats-the-best-way-to-store-phone-number-in-django-models
     - Backend validation
     - Frontend validation

3. populate.py script with functions which can be invoked separately from CLI
     PROBLEM
     - We would like to invoke the function bar() from our foo.py script

     SOLUTION
     - Do not run the module as a main program
     - i.e., do not write...    if __name__ == "__main__"
     - Instead, open a Python shell in CLI, import the module and invoke the required function, like so:
     - $ python
     - $ >>> import foo
     - $ >>> foo.bar()


4. Customising UserCreationForm
     - By default, UserCreationForm only asks for username, password, and password confirmation.
     - We wish to ask for other details.

5. Automatically generating a username when a user creates an account
     - https://stackoverflow.com/questions/28765847/generate-uniq-username-using-first-and-last-name-in-django
---------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------9-----------------------------------------------------------------------------------------------
-----------------------------------------------------T-E-S-T-I-N-G----------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
9.1. Running a specific test unit in CLI:

    Example:
    $ python manage.py test users.tests.CustomUserCreationFormTest.test_blank_data

---------------------------------------------------------------------------------------------------------------------------------------------------------
9.2. Testing Form Submission

9.2.1 Valid Submission

9.2.2 Invalid Submission
---------------------------------------------------------------------------------------------------------------------------------------------------------
9.3.1 Asserting url pattern resolves to correct class-based view function

READ: https://stackoverflow.com/questions/27320821/django-how-to-assert-url-pattern-resolves-to-correct-class-based-view-function

from django.urls import resolve
from .views import SignUp

class SignUpPageTest(TestCase):

    def test_signup_url_resolves_to_signup_view(self):
        found = resolve('/users/signup/')
        self.assertEqual(found.func.view_class, SignUp)

9.3.2 Asserting url pattern resolves to correct function-based view function

Same thing except for last line:

        self.assertEqual(found.func, sign_up)

---------------------------------------------------------------------------------------------------------------------------------------------------------


9.99 Boq
     - Testing Password
       self.assertTrue(user.check_password("dsg123FT2"))

     - Testing ForeignKey field
       self.assertEqual(user.locality, Locality.objects.get(id=1))

     ARRIVED: Displaying the comment form
     http://test-driven-django-development.readthedocs.io/en/latest/05-forms.html

7. When creating a Model object with a FK field; the FK field must be passed a primary key.
     - See users/tests.py test_valid_date() function.
     - Otherwise you will get the following error: "Select a valid choice. That choice is not one of the available choices."
   Testing Form with ForeignKey
     - https://stackoverflow.com/questions/34317847/django-forms-unit-tests-with-foreignkey

8. Overriding django.contrib.auth.models.AbstractUser to make first_name and last_name fields required.

9. At least one mobile number
     - BACKEND: Overriding CustomUser's base class User's save() method.
     - FRONTEND:

10. Overriding vs. replacing an admin template
     - https://docs.djangoproject.com/en/dev/ref/contrib/admin/#overriding-vs-replacing-an-admin-template
     -
11. Customizing admin/users/customuser/add to show certain fields
     - Previously, CustomUserAdmin extended UserAdmin
     - UserAdmin comes along with an add_page, where the admin is asked for 'username', 'password1', 'password2' and all other fields are hidden.
     - However, in the CustomUser model, we want the 'username' to be created from 'first_name' and 'last_name'.
     - Therefore we need to hide the 'username' field, and show the 'first_name', 'last_name' and other fields instead.
     - This can be achieved by making CustomUserAdmin extend ModelAdmin instead of UserAdmin
     - And then simply specifying the fields

12. Raising ValidationError neither mobile number is provided for CustomUser
     - Error needs to be displayed in admin add_page for CustomUser
     - clean() method or validator?
     - read: https://stackoverflow.com/questions/8771029/raise-a-validation-error-in-a-models-save-method-in-django/8771277

13. Model.clean()
     - This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field.
     - Example: see the clean() method in users.models.CustomUser
